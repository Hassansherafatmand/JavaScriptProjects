

1. Creating repos
00:00 - 00:02
Let's start working with Git!

2. Mental health in tech project
00:02 - 00:20
Throughout the course, we'll work on a project about mental health in tech. The files and directories are shown here. To use Git for version control in our project, we first need to create a Git repository, often referred to as a repo.

3. What is a Git repo?
00:20 - 00:38
A repo is a directory consisting of two parts - the first is the files and sub-directories that we create and edit. In this case a file called funding.doc, a report in markdown file format, and a sub-directory called data.

4. What is a Git repo?
00:38 - 01:07
The second part is the extra information that Git records about the project's history. The combination of these two things is called a repository. Git stores all of its extra information in a directory called dot-git, located in the repo's main directory. Git expects this information to be laid out in a particular way, so we should not edit or delete dot-git.

5. Why make a repo?
01:07 - 01:28
There are many benefits to creating a Git repo, including the ability to systematically track the versions of files, to revert to previous versions, and to compare versions at different points in time. If we host our repo in the cloud, then it also enables easy collaboration with colleagues!

1 Image credit: https://unsplash.com/@jasongoodman_youxventures
6. Creating a new repo
01:28 - 02:12
To create a new Git repo for our project, we use the git init command in the terminal, followed by the name of our project, mental-health-workspace. When we run the git init command with the name we provided for the repo, Git creates a new repo within the directory we ran the command from. We can use cd to change into this new repo. We can check that the Git repo has been initialized correctly by running the git status command. Success! The output confirms we have a Git repo, and suggests that once we've created files we can use the git add command to track them using Git.

7. Converting a project into a repo
02:12 - 02:45
Now we know how to create a Git repo from scratch, let's look at how to convert an existing project into a repo. Let's say we started working on the mental health in tech project without first creating a new Git repo. We can convert the existing directory to a Git repo by executing git init without providing a directory name. We run the command from our project directory. The output confirms that an empty repo has been created and provides the location.

8. What is being tracked?
02:45 - 03:11
Something interesting happens if we check the status of the repo. We can see Git has immediately recognized that there are modified files not being tracked by Git, in this case, the report-dot-md file and files within the data subdirectory. The output encourages us to start tracking these files using Git! We'll discuss how to do this in the next video.

9. Nested repositories
03:11 - 03:38
One word of caution when creating Git repos. Unless we are working on a very complex project, we should generally avoid creating a Git repo inside another Git repo, also known as nested repos. If we do this, there will be two dot-git directories. Unfortunately, as we try to make commits, Git will get confused about which directory it needs to update.

10. Let's practice!
03:38 - 03:42
Time to make our own Git repos!


Transcript
1. Creating repos
00:00 - 00:02
Let's start working with Git!

2. Mental health in tech project
00:02 - 00:20
Throughout the course, we'll work on a project about mental health in tech. The files and directories are shown here. To use Git for version control in our project, we first need to create a Git repository, often referred to as a repo.

3. What is a Git repo?
00:20 - 00:38
A repo is a directory consisting of two parts - the first is the files and sub-directories that we create and edit. In this case a file called funding.doc, a report in markdown file format, and a sub-directory called data.

4. What is a Git repo?
00:38 - 01:07
The second part is the extra information that Git records about the project's history. The combination of these two things is called a repository. Git stores all of its extra information in a directory called dot-git, located in the repo's main directory. Git expects this information to be laid out in a particular way, so we should not edit or delete dot-git.

5. Why make a repo?
01:07 - 01:28
There are many benefits to creating a Git repo, including the ability to systematically track the versions of files, to revert to previous versions, and to compare versions at different points in time. If we host our repo in the cloud, then it also enables easy collaboration with colleagues!

1 Image credit: https://unsplash.com/@jasongoodman_youxventures
6. Creating a new repo
01:28 - 02:12
To create a new Git repo for our project, we use the git init command in the terminal, followed by the name of our project, mental-health-workspace. When we run the git init command with the name we provided for the repo, Git creates a new repo within the directory we ran the command from. We can use cd to change into this new repo. We can check that the Git repo has been initialized correctly by running the git status command. Success! The output confirms we have a Git repo, and suggests that once we've created files we can use the git add command to track them using Git.

7. Converting a project into a repo
02:12 - 02:45
Now we know how to create a Git repo from scratch, let's look at how to convert an existing project into a repo. Let's say we started working on the mental health in tech project without first creating a new Git repo. We can convert the existing directory to a Git repo by executing git init without providing a directory name. We run the command from our project directory. The output confirms that an empty repo has been created and provides the location.

8. What is being tracked?
02:45 - 03:11
Something interesting happens if we check the status of the repo. We can see Git has immediately recognized that there are modified files not being tracked by Git, in this case, the report-dot-md file and files within the data subdirectory. The output encourages us to start tracking these files using Git! We'll discuss how to do this in the next video.

9. Nested repositories
03:11 - 03:38
One word of caution when creating Git repos. Unless we are working on a very complex project, we should generally avoid creating a Git repo inside another Git repo, also known as nested repos. If we do this, there will be two dot-git directories. Unfortunately, as we try to make commits, Git will get confused about which directory it needs to update.

10. Let's practice!
03:38 - 03:42
Time to make our own Git repos!

Transcript
1. Staging and committing files
00:00 - 00:08
We've set up our repo. In this video, we will build a workflow for updating and tracking our files using Git.

2. The Git workflow
00:08 - 00:54
There are three core steps to our Git workflow. First, we edit and save one or more files to our computer, as usual. Next, using Git, we add the file or files to a staging area. The staging area is created when we initialize a Git repository and it keeps track of what has been modified. Lastly, to save the files using Git, we make a commit. When we make a commit, Git will take a snapshot of the files at that point in time. This is essential in allowing us to compare files at different points in time and, if necessary, revert to previous versions!

3. Staging versus committing
00:54 - 01:16
We can think of adding files to the staging area as placing a letter in an envelope. By contrast, making a commit is like putting the envelope in a mailbox. We can add more things to the envelope or take things out as often as we want, but once we put it in the mailbox, we can't make further changes.

4. Adding to the staging area
01:16 - 01:50
So how do we track files using Git? Using the terminal, we can add a single file to the staging area using the command git add followed by the filename and extension. Here, we add our README Markdown file to the staging area. Alternatively, we can add all modified files in the current directory and any sub-directories using git add dot, as a dot represents all files and directories in our current location.

5. Making a commit
01:50 - 02:43
We then commit our draft file using git commit. We add the -m flag to allow us to include a log message about our commit, placing it in quotes. We include -m because it allows us to include a log message as part of the command. If we just wrote git commit it would open a text editor, which we would need to add a message to, save the file, then exit to return to the terminal. The output shows one file was changed and includes a series of characters called a hash. We'll learn about commit hashes in the next chapter. The log message is important, as we can refer to it later. The best practice is to keep it concise.

6. Let's practice!
02:43 - 02:47
Now it's your turn to save files using Git!



git add README.md
git add .

git commit -m "adding a Readme file"

Transcript
1. Viewing the version history
00:00 - 00:12
Welcome back! So, how can we see the version history of our files using Git? To do this, we need to understand how Git is storing data.

2. The commit structure
00:12 - 01:08
Git stores data through commits, which have three parts: the commit itself, the tree, and blobs. Let's examine each of these components. The commit contains metadata such as the author, log message, and commit time. The tree tracks the names and locations of files and directories when that commit happened. Think of it like a dictionary, with keys represented as unique identifiers, mapping to files or directories. For each file in the tree, there is a blob, which means binary large object. A blob may contain data of any kind. Blobs contain a compressed snapshot of the file's contents when the commit happened.

3. Visualizing the commit structure
01:08 - 01:14
Here, we visualize three commits to our repo to see these three components.

4. Visualizing the commit structure
01:14 - 01:40
In the first commit, we see a unique identifier ending in six-five. This identifier is known as a hash, which we will discuss later. Two files were modified in the tree - report.md and mental-health-survey.csv. The blob shows a snapshot of what the files contained at that time.

5. Visualizing the commit structure
01:40 - 02:03
In the second commit, three files are in the tree, but only two were modified - mental-health-survey.csv and a newly created summary statistics file. Therefore, the tree links report.md to the blob from the previous commit, as it wasn't modified in this commit.

6. Visualizing the commit structure
02:03 - 02:22
In the third and most recent commit, report-dot-md and mental-health-survey.csv are modified, with updated blobs created and linked to the tree. The summary statistics file wasn't changed, so the tree links to the blob in the second commit.

7. Git hash
02:22 - 03:04
Earlier, we mentioned a unique identifier called a hash. This is a 40-character string of numbers and letters like this. It is called a hash because Git produces it using a pseudo-random number generator called a hash function. Hashes enable Git to share data efficiently between repos. If two files are the same, their hashes will be the same. Therefore, Git can tell what information needs to be saved in which location by comparing hashes rather than entire files.

8. Git log
03:04 - 03:40
We can view commit information using the git log command, displaying all commits made to the repo in reverse chronological order, starting with the most recent commit. It will show the commit hash, author, date, and commit message. If the output doesn't fit in the terminal window, a colon will be at the end, indicating more commits. We can see more by pressing the space bar. To exit the log, we can press q and return to the terminal.

9. Let's practice!
03:40 - 03:47
Now let's use the commands we have learned to navigate the Git commit structure!


git log


1- Stablishing the culture
Stablish the culture that is going to happen during the quarter.
It allows students to feel comfortable and also get them to understand what 
you exdcpet and how the class work

2- creating a freindly and warm environment that students feel comfortable, they are invited , safe place to be. 

3- Desck and Materials organization procedures.

4-talking about routins and expectation.

-5 Procedures that keep the flow of the class like using nonverbal act that alow students to take a break like going to restroom or drinkking water. (transition is very important) 
-6 following up my expectations( makesure studnets follow my expectation).

-6 discussing about non-verbal (like going to rest room)
-6 practicng overtime that students feel profecint about the tasks.


7- morning routing

